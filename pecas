import 'package:flutter/material.dart';

void main() {
  runApp(ProducaoApp());
}

class ProducaoApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text(
            'Produção de Peças',
            style: TextStyle(color: Colors.white),
          ),
          backgroundColor: Colors.cyan[700],
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: SingleChildScrollView(
            child: ProducaoForm(),
          ),
        ),
        backgroundColor: Colors.cyan[100], // Background verde ciano
      ),
    );
  }
}

class ProducaoForm extends StatefulWidget {
  @override
  _ProducaoFormState createState() => _ProducaoFormState();
}

class _ProducaoFormState extends State<ProducaoForm> {
  final _formKey = GlobalKey<FormState>();
  final Producao p1 = Producao();

  final TextEditingController _altMPController = TextEditingController();
  final TextEditingController _compMPController = TextEditingController();
  final TextEditingController _altPAController = TextEditingController();
  final TextEditingController _compPAController = TextEditingController();
  final TextEditingController _altPBController = TextEditingController();
  final TextEditingController _compPBController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Form(
            key: _formKey,
            child: Column(
              children: [
                buildInputField('Altura Matéria Prima', _altMPController),
                buildInputField('Comprimento Matéria Prima', _compMPController),
                buildInputField('Altura Peça A', _altPAController),
                buildInputField('Comprimento Peça A', _compPAController),
                buildInputField('Altura Peça B', _altPBController),
                buildInputField('Comprimento Peça B', _compPBController),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      setState(() {
                        p1.setAltMP(double.parse(_altMPController.text));
                        p1.setCompMP(double.parse(_compMPController.text));
                        p1.setAltPA(double.parse(_altPAController.text));
                        p1.setCompPA(double.parse(_compPAController.text));
                        p1.setAltPB(double.parse(_altPBController.text));
                        p1.setCompPB(double.parse(_compPBController.text));
                        p1.calcularAreaMP();
                        p1.calcularAreaPA();
                        p1.calcularAreaPB();
                        p1.calcularTotalPA();
                        p1.calculaSobraMP();
                        if (p1.sobraSuficiente()) {
                          p1.calcularTotalPB();
                        }
                      });
                    }
                  },
                  child: Text('Calcular Produção'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.cyan[700],
                  ),
                ),
              ],
            ),
          ),
          SizedBox(height: 20),
          buildResultsContainer(),
        ],
      ),
    );
  }

  Widget buildInputField(String label, TextEditingController controller) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        keyboardType: TextInputType.number,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(),
          fillColor: Colors.white,
          filled: true, // Background branco nos inputs
        ),
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Por favor, insira um valor';
          }
          return null;
        },
      ),
    );
  }

  Widget buildResultsContainer() {
    return Container(
      padding: EdgeInsets.all(16.0),
      decoration: BoxDecoration(
        color: Colors.cyan[200],
        border: Border.all(color: Colors.cyan[700]!),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          buildResultText('Área da Matéria Prima: ${p1.getAreaMP().toStringAsFixed(2)}'),
          buildResultText('Área da Peça A: ${p1.getAreaPA().toStringAsFixed(2)}'),
          buildResultText('Área da Peça B: ${p1.getAreaPB().toStringAsFixed(2)}'),
          buildResultText('Total de Peças A Produzidas: ${p1.getTotalPA()}'),
          buildResultText('Sobra de Matéria Prima: ${p1.getSobraMP().toStringAsFixed(2)}'),
          buildResultText('Total de Peças B Produzidas: ${p1.sobraSuficiente() ? p1.getTotalPB() : 'N/A'}'),
        ],
      ),
    );
  }

  Widget buildResultText(String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Text(
        text,
        style: TextStyle(
          color: Colors.blueGrey[800],
          fontSize: 16,
        ),
      ),
    );
  }
}

class Producao {
  double altMP = 0.0, compMP = 0.0, areaMP = 0.0;
  double altPA = 0.0, compPA = 0.0, areaPA = 0.0;
  double altPB = 0.0, compPB = 0.0, areaPB = 0.0;
  int totalPA = 0, totalPB = 0;
  double sobraMP = 0.0;

  void setAltMP(double v) => altMP = v;
  void setCompMP(double v) => compMP = v;
  double getAltMP() => altMP;
  double getCompMP() => compMP;
  void calcularAreaMP() => areaMP = altMP * compMP;
  double getAreaMP() => areaMP;
  void setAltPA(double v) => altPA = v;
  void setCompPA(double v) => compPA = v;
  double getAltPA() => altPA;
  double getCompPA() => compPA;
  void calcularAreaPA() => areaPA = altPA * compPA;
  double getAreaPA() => areaPA;
  void setAltPB(double v) => altPB = v;
  void setCompPB(double v) => compPB = v;
  double getAltPB() => altPB;
  double getCompPB() => compPB;
  void calcularAreaPB() => areaPB = altPB * compPB;
  double getAreaPB() => areaPB;
  void calcularTotalPA() {
    double temp = (areaMP / areaPA);
    totalPA = temp.toInt();
  }
  int getTotalPA() => totalPA;
  void calculaSobraMP() => sobraMP = areaMP - (totalPA * areaPA);
  double getSobraMP() => sobraMP;
  bool sobraSuficiente() => sobraMP >= areaPB;
  void calcularTotalPB() {
    double temp = (sobraMP / areaPB);
    totalPB = temp.toInt();
  }
  int getTotalPB() => totalPB;
}


